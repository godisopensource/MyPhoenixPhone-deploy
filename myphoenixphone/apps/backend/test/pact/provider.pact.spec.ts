import { Verifier } from '@pact-foundation/pact';
import * as path from 'path';

/**
 * Provider verification test
 *
 * This test verifies that the backend API satisfies all the contracts
 * generated by the consumer tests. It uses state handlers to set up
 * the required test data for each interaction.
 *
 * NOTE: This test expects the backend to be already running on port 3003.
 * The automated workflow script (scripts/run-pact-tests.sh) handles this.
 */
describe('Pact Provider Verification', () => {
  it('validates the expectations of MyPhoenixPhone-Web', async () => {
    const opts = {
      provider: 'MyPhoenixPhone-Backend',
      providerBaseUrl: 'http://localhost:3003',

      // Path to consumer pacts
      pactUrls: [
        path.resolve(
          __dirname,
          '../../../web/pacts/myphoenixphone-web-myphoenixphone-backend.json',
        ),
      ],

      // State handlers to set up test data
      stateHandlers: {
        // Eligibility API states
        'user has valid consent and eligible device': async () => {
          // Setup: Create test user with valid consent and eligible device
          // This would typically insert test data into the database
          console.log(
            'Setting up: user with valid consent and eligible device',
          );
          return Promise.resolve({
            description:
              'User has valid consent, SIM swap detected within 30 days',
          });
        },

        'user has valid consent and ineligible device': async () => {
          console.log(
            'Setting up: user with valid consent and ineligible device',
          );
          return Promise.resolve({
            description: 'User has valid consent, no SIM swap detected',
          });
        },

        'user has no valid consent': async () => {
          console.log('Setting up: user without valid consent');
          return Promise.resolve({
            description: 'User session has no valid consent token',
          });
        },

        'request has valid consent': async () => {
          console.log('Setting up: valid consent in session');
          return Promise.resolve({
            description: 'Session has valid consent',
          });
        },

        'user has valid consent and stored signals exist': async () => {
          console.log('Setting up: stored signals for phone number');
          return Promise.resolve({
            description: 'Phone number has stored eligibility signals',
          });
        },

        // Consent API states
        'Orange OAuth provider is available': async () => {
          console.log('Setting up: Orange OAuth provider available');
          return Promise.resolve({
            description: 'Orange OAuth provider is reachable',
          });
        },

        'request has invalid phone number format': async () => {
          console.log('Setting up: invalid phone number format');
          return Promise.resolve({
            description: 'Request contains invalid phone number',
          });
        },

        'valid OAuth callback with authorization code': async () => {
          console.log('Setting up: valid OAuth callback state');
          return Promise.resolve({
            description: 'OAuth state and code are valid',
          });
        },

        'OAuth callback without state parameter': async () => {
          console.log('Setting up: OAuth callback missing state');
          return Promise.resolve({
            description: 'OAuth callback request without state parameter',
          });
        },

        'user has active consent': async () => {
          console.log('Setting up: user with active consent');
          return Promise.resolve({
            description: 'User has an active consent that can be revoked',
          });
        },

        'consent does not exist': async () => {
          console.log('Setting up: non-existent consent');
          return Promise.resolve({
            description: 'Consent ID does not exist in database',
          });
        },

        // Verification API states
        'user has valid consent and phone number is reachable': async () => {
          console.log('Setting up: user with consent and reachable phone');
          return Promise.resolve({
            description: 'User has consent, phone is reachable for SMS',
          });
        },

        'user has exceeded SMS rate limit': async () => {
          console.log('Setting up: user exceeded SMS rate limit');
          return Promise.resolve({
            description: 'User has sent too many SMS codes recently',
          });
        },

        'valid verification code exists': async () => {
          console.log('Setting up: valid verification code');
          return Promise.resolve({
            description: 'Verification ID exists with matching code',
          });
        },

        'verification code exists but code is incorrect': async () => {
          console.log('Setting up: verification code with incorrect code');
          return Promise.resolve({
            description: 'Verification ID exists but code does not match',
          });
        },

        'verification ID does not exist': async () => {
          console.log('Setting up: non-existent verification ID');
          return Promise.resolve({
            description: 'Verification ID not found in database',
          });
        },

        'verification code has expired': async () => {
          console.log('Setting up: expired verification code');
          return Promise.resolve({
            description: 'Verification code exists but has expired',
          });
        },
      },

      // Logging options
      logLevel: 'info' as const,

      // Request filters to modify requests before they hit the provider
      // Useful for injecting authentication tokens, etc.
      requestFilter: (req, res, next) => {
        // Add any necessary headers or modify request
        // For example, inject test session cookies
        if (req.headers.cookie && req.headers.cookie.includes('connect.sid')) {
          // The cookie is already set by the consumer test
          console.log('Request has session cookie');
        }
        next();
      },
    };

    // Run the verification
    const verifier = new Verifier(opts);
    await verifier.verifyProvider();
  });
});
